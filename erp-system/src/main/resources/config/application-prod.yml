# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================
eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE} # This is needed for the load balancer
      #defaultZone: http://admin:${jhipster.registry.password}@jhipster-registry:8761/eureka # This is needed for the load balancer
      #defaultZone: http://admin:${jhipster.registry.password}@${jhipster.registry.host}:8761/eureka/

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    io.github.erp: INFO
    org.apache.kafka: DEBUG
    org.springframework: WARN

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  cloud:
    config:
      retry:
        initial-interval: 1000
        max-interval: 2000
        max-attempts: 100
      #uri: http://admin:${jhipster.registry.password}@localhost:8761/config
      uri: ${SPRING_CLOUD_CONFIG_URI}
      # name of the config server's property source (file.yml) that we want to use
      name: erpSystem
      profile: prod
      label: main # toggle to switch to a different version of the configuration as stored in git
      # it can be set to any label, branch or commit of the configuration source Git repository
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${LOCAL_PG_SERVER}/${ERP_SYSTEM_PROD_DB}
    username: ${PG_DATABASE_PROD_USER}
    password: ${PG_DATABASE_PROD_PASSWORD}
    hikari:
      poolName: Hikari
      auto-commit: false
      maximum-pool-size: 30
      allow-pool-suspension: true
  jpa:
    show-sql: false
    database-platform: tech.jhipster.domain.util.FixedPostgreSQL10Dialect
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAPSERVERS}
    admin:
      properties:
        replication.factor: ${KAFKA_REPLICATION_FACTOR}
    topics:
      depreciation-batch:
        topic:
          name: "depreciation_batch_topic"
        consumer:
          group.id: erp-system-depreciation
          auto.offset.reset: earliest
          properties:
            spring.json.trusted.packages: "*"
            replication.factor: ${KAFKA_REPLICATION_FACTOR}
        producer:
          key.serializer: org.apache.kafka.common.serialization.StringSerializer
          properties:
            replication.factor: ${KAFKA_REPLICATION_FACTOR};
      nbv:
        topic:
          name: "nbv_batch_topic"
        consumer:
          group.id: erp-system-nbv
          auto.offset.reset: earliest
          properties:
            spring.json.trusted.packages: "*"
            replication.factor: ${KAFKA_REPLICATION_FACTOR}
        producer:
          key.serializer: org.apache.kafka.common.serialization.StringSerializer
          properties:
            replication.factor: ${KAFKA_REPLICATION_FACTOR};
  elasticsearch:
    rest:
      # uris: http://localhost:9200
      uris: ${SPRING_DATA_JEST_URI}
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${ERP_SYSTEM_EMAIL_USER}
    password: ${ERP_SYSTEM_EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
  thymeleaf:
    cache: true
  sleuth:
    sampler:
      probability: 1 # report 100% of traces
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    base-url: http://localhost:9411
    enabled: false
    locator:
      discovery:
        enabled: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias erpsystem -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: ${ERP_SYSTEM_PROD_PORT}
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cache: # Cache configuration
    hazelcast: # Hazelcast distributed cache
      time-to-live-seconds: 3600
      backup-count: 1
  cors:
    # Allow Ionic for JHipster by default (* no longer allowed in Spring Boot 2.4+)
    # The allowed origin that is dynamically configured just straight-out refused to work
    #allowed-origins: 'http://localhost:8100,https://localhost:8100,http://localhost:9000,https://localhost:9000,https://localhost:8981,http://localhost:8981,https://localhost:8984,http://localhost:8984,https://localhost:8982,http://localhost:8982,${app.SandboxInstance.urls}'
    #allowed-origins: 'http://localhost:8100,https://localhost:8100,http://localhost:9000,https://localhost:9000,https://localhost:8981,http://localhost:8981,${app.SandboxInstance.urls}'
    allowed-origins: 'http://localhost:9000,https://localhost:9000,https://localhost:8981,http://localhost:8981,http://10.60.27.22:9000,http://localhost:8985,http://127.0.0.1:8985,http://127.0.0.1:8985,http://10.60.27.22:8985,${app.SandboxInstance.urls}'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Origin,X-Requested-With,Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params'
    allow-credentials: true
    max-age: 1800
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        # base64-secret: ZWMyYzI1MmU3Mzg1ZTU4ZjFmOTIzYjEzOWZkZWU1MWZhNGY4ZTA3ZTEwYmYxMzczOGE3NDZiZjNkMDE3NjNiYTBmMTE0ODBiYTcyZDI0ZTcyNmU5OTA2NGY4NDUwZGEyMWQwYThmMTgxNWJiMjQ2OGQ0NmIxMTQwNTE0MGFkNzA=
        base64-secret: ${SECURITY_AUTHENTICATION_JWT_BASE64_SECRET}
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: ${ERP_SYSTEM_PROD_MAIL_BASE_URL} # Modify according to your server's URL
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
  registry:
    password: admin
    # host: ${JHIPSTER_REGISTRY_HOST}
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

#application:
#  Registry:
#    host: ${SERVER_API_DOCKER_DEPLOY_HOST}

app:
  SandboxInstance:
    urls: ${SANDBOX_INSTANCE_URLS}
  ReIndexer:
    #      interval: PT3600S
    interval: ${ERP_REINDEXER_INTERVAL_PROD}


